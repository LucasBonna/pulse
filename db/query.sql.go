// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.30.0
// source: query.sql

package db

import (
	"context"
	"database/sql"
)

const createJob = `-- name: CreateJob :one
INSERT INTO jobs (
  name, url, method, headers, interval_seconds, next_run_at, active
) VALUES (
  ?, ?, ?, ?, ?, ?, ?
)
RETURNING id, name, url, method, headers, interval_seconds, next_run_at, active
`

type CreateJobParams struct {
	Name            string
	Url             string
	Method          interface{}
	Headers         sql.NullString
	IntervalSeconds int64
	NextRunAt       sql.NullTime
	Active          sql.NullBool
}

func (q *Queries) CreateJob(ctx context.Context, arg CreateJobParams) (Job, error) {
	row := q.db.QueryRowContext(ctx, createJob,
		arg.Name,
		arg.Url,
		arg.Method,
		arg.Headers,
		arg.IntervalSeconds,
		arg.NextRunAt,
		arg.Active,
	)
	var i Job
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Url,
		&i.Method,
		&i.Headers,
		&i.IntervalSeconds,
		&i.NextRunAt,
		&i.Active,
	)
	return i, err
}

const getAllJobs = `-- name: GetAllJobs :many
SELECT id, name, url, method, headers, interval_seconds, next_run_at, active FROM jobs
ORDER BY id
`

func (q *Queries) GetAllJobs(ctx context.Context) ([]Job, error) {
	rows, err := q.db.QueryContext(ctx, getAllJobs)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Job
	for rows.Next() {
		var i Job
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Url,
			&i.Method,
			&i.Headers,
			&i.IntervalSeconds,
			&i.NextRunAt,
			&i.Active,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
